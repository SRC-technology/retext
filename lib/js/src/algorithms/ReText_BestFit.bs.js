// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReText_Model = require("../ReText_Model.bs.js");
var ReText_Utils = require("../ReText_Utils.bs.js");

var p = /* Penalty */Block.variant("Penalty", 2, [/* record */Block.record([
        "width",
        "cost",
        "flagged"
      ], [
        0,
        0,
        1
      ])]);

function handle_glue(glue, lines) {
  return Pervasives.$at(ReText_Utils.List[/* init */44](lines), /* :: */Block.simpleVariant("::", [
                ReText_Utils.List[/* last */45](lines, /* :: */Block.simpleVariant("::", [
                        p,
                        /* [] */0
                      ])),
                /* :: */Block.simpleVariant("::", [
                    /* :: */Block.simpleVariant("::", [
                        /* Glue */Block.variant("Glue", 1, [glue]),
                        /* [] */0
                      ]),
                    /* [] */0
                  ])
              ]));
}

function handle_box(box, lines, desired_width) {
  var current_element = /* Box */Block.variant("Box", 0, [box]);
  var tentative_next_cumulated_width = ReText_Model.MeasuredWidth[/* measure */0](Pervasives.$at(ReText_Utils.List[/* last */45](lines, /* :: */Block.simpleVariant("::", [
                  p,
                  /* [] */0
                ])), /* :: */Block.simpleVariant("::", [
              current_element,
              /* [] */0
            ])));
  var can_break = desired_width > tentative_next_cumulated_width[/* min */1] && desired_width < tentative_next_cumulated_width[/* max */2];
  if (can_break) {
    var match = ReText_Utils.List[/* last */45](ReText_Utils.List[/* last */45](lines, /* :: */Block.simpleVariant("::", [
                p,
                /* [] */0
              ])), p);
    var tmp;
    switch (match.tag | 0) {
      case 1 : 
          tmp = ReText_Utils.List[/* init */44](ReText_Utils.List[/* last */45](lines, /* :: */Block.simpleVariant("::", [
                      p,
                      /* [] */0
                    ])));
          break;
      case 0 : 
      case 2 : 
          tmp = ReText_Utils.List[/* last */45](lines, /* :: */Block.simpleVariant("::", [
                  p,
                  /* [] */0
                ]));
          break;
      
    }
    return Pervasives.$at(ReText_Utils.List[/* init */44](lines), /* :: */Block.simpleVariant("::", [
                  tmp,
                  /* :: */Block.simpleVariant("::", [
                      /* :: */Block.simpleVariant("::", [
                          current_element,
                          /* [] */0
                        ]),
                      /* [] */0
                    ])
                ]));
  } else {
    return Pervasives.$at(ReText_Utils.List[/* init */44](lines), /* :: */Block.simpleVariant("::", [
                  Pervasives.$at(ReText_Utils.List[/* last */45](lines, /* :: */Block.simpleVariant("::", [
                              p,
                              /* [] */0
                            ])), /* :: */Block.simpleVariant("::", [
                          current_element,
                          /* [] */0
                        ])),
                  /* [] */0
                ]));
  }
}

function $$break(elements, width) {
  var _elements = elements;
  var _lines = /* [] */0;
  while(true) {
    var lines = _lines;
    var elements$1 = _elements;
    if (elements$1) {
      var match = elements$1[0];
      switch (match.tag | 0) {
        case 0 : 
            _lines = handle_box(match[0], lines, width);
            _elements = elements$1[1];
            continue ;
        case 1 : 
            _lines = handle_glue(match[0], lines);
            _elements = elements$1[1];
            continue ;
        case 2 : 
            _elements = elements$1[1];
            continue ;
        
      }
    } else {
      return lines;
    }
  };
}

exports.p = p;
exports.handle_glue = handle_glue;
exports.handle_box = handle_box;
exports.$$break = $$break;
/* No side effect */
